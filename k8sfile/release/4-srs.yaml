apiVersion: v1
kind: ConfigMap
metadata:
  name: frepai-srs-cm
  namespace: frepai
data:
  server.conf: |
    listen              1935;
    max_connections     1000;
    daemon              off;

    srs_log_tank        console;
    srs_log_level       info;

    rtc_server {
        enabled         on;
        listen 30008;
        candidate $CANDIDATE;
    }

    http_server {
      enabled         on;
      listen          8080;
      dir             ./objs/nginx/html;
      https {
        enabled on;
        listen 8088;
        key ./conf/server.key;
        cert ./conf/server.crt;
      }
    }

    http_api {
      enabled         on;
      listen          1985;
      https {
        enabled on;
        listen 1990;
        key ./conf/server.key;
        cert ./conf/server.crt;
      }
    }

    vhost __defaultVhost__ {
        tcp_nodelay     on;
        min_latency     on;
        play {
            gop_cache       off;
            queue_length    10;
            mw_latency      0;
            mw_msgs 0;
        }

        http_remux {
            enabled         on;
            mount           [vhost]/[app]/[stream].flv;
        }

        publish {
            mr          off;
        }

        rtc {
            enabled     on;
            keep_bframe on;
            rtmp_to_rtc on;
            rtc_to_rtmp off;
        }
    }

    vhost seg.0s {
      tcp_nodelay     on;
      min_latency     on;
      play {
        gop_cache       off;
        queue_length    10;
        mw_latency      0;
        mw_msgs 0;
      }

      publish {
        mr          off;
        normal_timeout      20000;
      }

      rtc {
        enabled     on;
        keep_bframe on;
        rtmp_to_rtc on;
        rtc_to_rtmp off;
      }

      dvr {
        enabled             off;
      }

      http_hooks {
        enabled       	on;
        # on_connect      http://127.0.0.1:1818/apis/srs/v1/on_connect;
        # on_close        http://127.0.0.1:1818/apis/srs/v1/on_close;
        on_publish      http://127.0.0.1:1818/apis/srs/v1/on_publish;
        on_unpublish    http://127.0.0.1:1818/apis/srs/v1/on_unpublish;
        # on_play         http://127.0.0.1:1818/apis/srs/v1/on_play;
        # on_stop         http://127.0.0.1:1818/apis/srs/v1/on_stop;
        # on_hls          http://127.0.0.1:1818/apis/srs/v1/on_hls;
        # on_dvr          http://127.0.0.1:1818/apis/srs/v1/on_dvr;
      }
    }


  vhost.conf: |
    vhost seg.${DURATION}s {
      tcp_nodelay     on;
      min_latency     on;
      play {
        gop_cache       off;
        queue_length    10;
        mw_latency      0;
        mw_msgs 0;
      }

      publish {
        mr          off;
        normal_timeout      20000;
      }

      rtc {
        enabled     on;
        keep_bframe on;
        rtmp_to_rtc on;
        rtc_to_rtmp off;
      }

      dvr {
        enabled             on;
        dvr_path            /data/[app]/[stream]/[2006][01][02][15][04][05].mp4;
        dvr_plan            segment;
        dvr_duration        ${DURATION};
        dvr_wait_keyframe   on;
      }

      http_hooks {
        enabled       	on;
        on_publish      http://127.0.0.1:1818/apis/srs/v1/on_publish;
        on_unpublish    http://127.0.0.1:1818/apis/srs/v1/on_unpublish;
        on_dvr          http://127.0.0.1:1818/apis/srs/v1/on_dvr;
      }
    }

  nginx.conf: |
    worker_processes  1;
    events {
      worker_connections  1024;
    }
    http {
      include             /etc/nginx/mime.types;
      server {
        listen       80;
        # listen       443 ssl http2;
        server_name  _;
        # ssl_certificate      /etc/nginx/ssl/server.crt;
        # ssl_certificate_key  /etc/nginx/ssl/server.key;

        location ~ ^/(console|players)/ {
          proxy_pass http://$arg_ip:8080$request_uri;
        }
        location ~ ^/.+/.*\.(flv|m3u8|ts|aac|mp3)$ {
          proxy_pass http://$arg_ip:8080$request_uri;
        }
        location ~ ^/(api|rtc)/ {
          proxy_pass http://$arg_ip:1985$request_uri;
        }
      }
    }

---

kind: Service
apiVersion: v1
metadata:
  name: srs-service
  namespace: frepai
spec:
  selector:
    app: srs-app
  type: NodePort
  ports:
    - name: srs-web
      port: 8080
      targetPort: web-port
      nodePort: 30808
    - name: srs-rtmp
      port: 1935
      targetPort: rtmp-port
      nodePort: 31935
    - name: srs-api
      port: 1985
      targetPort: api-port
      nodePort: 31985
    - name: srs-rtc
      port: 30008
      targetPort: rtc-port
      nodePort: 30008
      protocol: UDP
    - name: srs-web-tls
      port: 8088
      targetPort: web-port-tls
      nodePort: 30888
    - name: srs-api-tls
      port: 1990
      targetPort: api-port-tls
      nodePort: 31990
    - name: srs-nginx
      port: 80
      targetPort: srs-nginx-port

  # not modify source ip
  externalTrafficPolicy: Local

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: srs-deployment
  namespace: frepai
  labels:
    app: srs-app
spec:
  selector:
    matchLabels:
      app: srs-app
  replicas: 1
  template:
    metadata:
      labels:
        app: srs-app
    spec:
      containers:
        - name: srs-rtc
          image: hzcsk8s.io/frepai/srs_rtc
          imagePullPolicy: Always
          ports:
            - name: web-port
              containerPort: 8080
            - name: rtmp-port
              containerPort: 1935
            - name: api-port
              containerPort: 1985
            - name: rtc-port
              containerPort: 30008
              protocol: UDP
            - name: web-port-tls
              containerPort: 8088
            - name: api-port-tls
              containerPort: 1990

          command:
            - /bin/sh
            - -c
            - |
              SRS_ROOT=/usr/local/srs
              SRS_CONF=${SRS_ROOT}/conf/frepai.conf
              DURATIONS=(15 30 60 120 300 600 900 1200 1500)
              cat /srs/server.conf > ${SRS_CONF}
              for d in ${DURATIONS[@]}
              do
                  DURATION=$d eval "echo \"$(cat /srs/vhost.conf)\"" >> ${SRS_CONF}
              done
              CANDIDATE=$(curl -s ipecho.net/plain) ${SRS_ROOT}/objs/srs -c ${SRS_CONF}

          resources:
            requests:
              memory: "0.5Gi"
              cpu: "0.8"
            limits:
              memory: "1Gi"
              cpu: "0.8"

          # lifecycle:
          #   postStart:
          #     exec:
          #       command: ["/bin/sh", "-c", "mkdir -p /data"]
          #   preStop:
          #     exec:
          #       command: ["/bin/sh", "-c", "rm -rf /data 2>/dev/null"]

          volumeMounts:
            - name: cache-volume
              mountPath: /data
            - name: srsconf-volume
              mountPath: "/srs/"
              readOnly: true
            # - name: tlsconf-volume
            #   mountPath: "/tls/"
            #   readOnly: true
            # - name: tlsconf-volume
            #   mountPath: "/usr/local/srs/conf/server.key"
            #   subPath: "tls.key"
            #   readOnly: true
            # - name: tlsconf-volume
            #   mountPath: "/usr/local/srs/conf/server.crt"
            #   subPath: "tls.crt"
            #   readOnly: true

        - name: srs-app
          image: hzcsk8s.io/frepai/srs_app
          imagePullPolicy: Always
          command:
            - /bin/sh
            - -c
          args: ["NET_IP=$(curl -s ipecho.net/plain) LAN_IP=$(cat /etc/hosts | grep 'srs-' | awk '{print $1}') python3 app_service.py --task srs.dvr"]

          env:
            - name: KAFKA_HOST
              valueFrom:
                configMapKeyRef:
                  name: frepai-kafka-cm
                  key: kafka_host

            - name: KAFKA_PORT
              valueFrom:
                configMapKeyRef:
                  name: frepai-kafka-cm
                  key: kafka_port

            - name: KAFKA_TOPIC
              valueFrom:
                configMapKeyRef:
                  name: frepai-kafka-cm
                  key: frepai_topic_srs

          resources:
            requests:
              memory: "0.5Gi"
              cpu: "0.8"
            limits:
              memory: "1Gi"
              cpu: "0.8"

          livenessProbe:
            exec:
              command: ["test", "-e", "/tmp/healthy"]
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 20
            failureThreshold: 3

          volumeMounts:
            - name: cache-volume
              mountPath: /data

        - name: srs-nginx
          image: nginx
          imagePullPolicy: IfNotPresent
          ports:
            - name: srs-nginx-port
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: srsconf-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf

      volumes:
        - name: cache-volume
          emptyDir: {}
        - name: srsconf-volume
          configMap:
            name: frepai-srs-cm
        # - name: tlsconf-volume
        #   secret:
        #     secretName: frepai-srs-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 10
